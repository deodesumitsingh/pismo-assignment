// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(number) values ($1)
RETURNING id, number, created_at, updated_at
`

func (q *Queries) CreateAccount(ctx context.Context, number string) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, number)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, number, created_at, updated_at FROM accounts WHERE id = $1
`

func (q *Queries) GetAccountById(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByNumber = `-- name: GetAccountByNumber :one
SELECT id, number, created_at, updated_at FROM accounts WHERE number = $1
`

func (q *Queries) GetAccountByNumber(ctx context.Context, number string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByNumber, number)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
